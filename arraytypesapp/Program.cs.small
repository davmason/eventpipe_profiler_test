using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using Microsoft.Diagnostics.NETCore.Client;
using Microsoft.Diagnostics.Tracing;
using Microsoft.Diagnostics.Tracing.Etlx;

namespace EventSourceTest
{
    class TestEventSource0: EventSource
    {
        public TestEventSource0()
            : base(EventSourceSettings.EtwSelfDescribingEventFormat)
        {
             // Empty constructor body
        }


        [Event(1, Level = (EventLevel)2)]
        public void TestEvent1(uint[] arg0, short[] arg1, long arg2)
        {
            WriteEvent(1, arg0, arg1, arg2);
        }

        [Event(2, Keywords = (EventKeywords)1231036291)]
        public void TestEvent2(long arg0, int arg1, int[] arg2, ulong[] arg3)
        {
            WriteEvent(2, arg0, arg1, arg2, arg3);
        }

        [Event(3, Level = (EventLevel)2, Opcode = (EventOpcode)24, Version = 7)]
        public void TestEvent3(char[] arg0)
        {
            WriteEvent(3, arg0);
        }

    }

    class Program
    {
        static int s_successCount = 0;

        static readonly string traceIDValidationMessage = "Expected ID {0} but got ID {1} for EventSource={2} Event={3}";
        static readonly string traceVersionValidationMessage = "Expected version {0} but got version {1} for EventSource={2} Event={3}";
        static readonly string traceLevelValidationMessage = "Expected level {0} but got level {1} for EventSource={2} Event={3}";
        static readonly string traceOpcodeValidationMessage = "Expected opcode {0} but got opcode {1} for EventSource={2} Event={3}";
        static readonly string tracePayloadValidationMessage = "Expected {0} payload items but got {1} items for EventSource={2} Event={3}";
        static readonly string tracePayloadNamesValidationMessage = "Expected argument name {0} but got name {1} for EventSource={2} Event={3}";
        static readonly string tracePayloadTypeValidationMessage = "Expected type {0} but got type {1} for EventSource={2} Event={3} Argument={4}";
        static readonly string tracePayloadValueValidationMessage = "Expected argument value {0} but got value {1} for EventSource={2} Event={3} Argument={4}";

        public static EventPipeSession AttachEventPipeSessionToSelf(IEnumerable<EventPipeProvider> providers)
        {
            int processId = Process.GetCurrentProcess().Id;
            DiagnosticsClient client = new DiagnosticsClient(processId);
            return client.StartEventPipeSession(providers, /* requestRunDown */ false);
        }

        static bool ArraysEqual<T>(T[] lhs, T[] rhs)
        {
            if (lhs.Length != rhs.Length)
            {
                return false;
            }

            for (int i = 0; i < lhs.Length; ++i)
            {
                if (!lhs[i].Equals(rhs[i]))
                {
                    return false;
                }
            }

            return true;
        }

        static void WriteEvents()
        {
            TestEventSource0 eventSource0 = new TestEventSource0(); 
            eventSource0.TestEvent1(new uint[] {(uint)2032854139, (uint)1608221689, (uint)1470019200, (uint)199494339, (uint)1238846140, (uint)1366609043}, new short[] {(short)26494, (short)17115, (short)-7229, (short)18850, (short)27931}, 2033417279);
            eventSource0.TestEvent2(-1001479330, -1397908228, new int[] {1470938110, 172564262, 1133558854, -1572049829}, new ulong[] {(ulong)2055126903, (ulong)593325874, (ulong)2130052527, (ulong)162795177});
            eventSource0.TestEvent3(new char[] {(char)59299, (char)13231, (char)38541, (char)7407, (char)35812});
        }

        static void ValidateEvent(TraceEvent traceEvent)
        {
            if (traceEvent.ProviderName == "TestEventSource0")
            {
                if (ValidateTestEventSource0(traceEvent))
                {
                     ++s_successCount;
                }

                return;
            }

        }

        static bool ValidateTestEventSource0(TraceEvent traceEvent)
        {
            if (traceEvent.ProviderName == "TestEventSource0")
            {
                if (traceEvent.EventName == "TestEvent1")
                {
                    // Skipping ID/Version validation because this EventSource is using SelfDescribing events.
                    if ((int)traceEvent.Level != 2) { Console.WriteLine(traceLevelValidationMessage, 2, (int)traceEvent.Level, "TestEventSource0", "TestEvent1"); return false; }
                    if ((int)traceEvent.Keywords != 0) { Console.WriteLine($"Expected keywords 0 but got keywords{(int)traceEvent.Keywords} for EventSource=TestEventSource0 Event=TestEvent1"); return false; }
                    if ((int)traceEvent.Opcode != 0) { Console.WriteLine(traceOpcodeValidationMessage, 0, (int)traceEvent.Opcode, "TestEventSource0", "TestEvent1"); return false; }
                     ++s_successCount;
                    if (traceEvent.PayloadNames.Count() != 3) { Console.WriteLine(tracePayloadValidationMessage, 3, traceEvent.PayloadNames.Count(), "TestEventSource0", "TestEvent1"); return false; }
                    if (traceEvent.PayloadNames[0] != "arg0") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg0", traceEvent.PayloadNames[0], "TestEventSource0", "TestEvent1"); return false; }
                    if (traceEvent.PayloadValue(0).GetType() != typeof(uint[])) { Console.WriteLine(tracePayloadTypeValidationMessage, "uint[]", traceEvent.PayloadValue(0).GetType(), "TestEventSource0", "TestEvent1", "arg0"); return false; }
                    if (!ArraysEqual((uint[])traceEvent.PayloadValue(0), new uint[] {(uint)2032854139, (uint)1608221689, (uint)1470019200, (uint)199494339, (uint)1238846140, (uint)1366609043})) { Console.WriteLine(tracePayloadValueValidationMessage, new uint[] {(uint)2032854139, (uint)1608221689, (uint)1470019200, (uint)199494339, (uint)1238846140, (uint)1366609043}, traceEvent.PayloadValue(0), "TestEventSource0", "TestEvent1", "arg0"); return false; }
                    if (traceEvent.PayloadNames[1] != "arg1") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg1", traceEvent.PayloadNames[1], "TestEventSource0", "TestEvent1"); return false; }
                    if (traceEvent.PayloadValue(1).GetType() != typeof(short[])) { Console.WriteLine(tracePayloadTypeValidationMessage, "short[]", traceEvent.PayloadValue(1).GetType(), "TestEventSource0", "TestEvent1", "arg1"); return false; }
                    if (!ArraysEqual((short[])traceEvent.PayloadValue(1), new short[] {(short)26494, (short)17115, (short)-7229, (short)18850, (short)27931})) { Console.WriteLine(tracePayloadValueValidationMessage, new short[] {(short)26494, (short)17115, (short)-7229, (short)18850, (short)27931}, traceEvent.PayloadValue(1), "TestEventSource0", "TestEvent1", "arg1"); return false; }
                    if (traceEvent.PayloadNames[2] != "arg2") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg2", traceEvent.PayloadNames[2], "TestEventSource0", "TestEvent1"); return false; }
                    if (traceEvent.PayloadValue(2).GetType() != typeof(long)) { Console.WriteLine(tracePayloadTypeValidationMessage, "long", traceEvent.PayloadValue(2).GetType(), "TestEventSource0", "TestEvent1", "arg2"); return false; }
                    if ((long)traceEvent.PayloadValue(2) != 2033417279) {  Console.WriteLine(tracePayloadValueValidationMessage, 2033417279, traceEvent.PayloadValue(2), "TestEventSource0", "TestEvent1", "arg2"); return false; }

                    return true;
                }
                if (traceEvent.EventName == "TestEvent2")
                {
                    // Skipping ID/Version validation because this EventSource is using SelfDescribing events.
                    if ((int)traceEvent.Level != 4) { Console.WriteLine(traceLevelValidationMessage, 4, (int)traceEvent.Level, "TestEventSource0", "TestEvent2"); return false; }
                    if ((int)traceEvent.Keywords != 1231036291) { Console.WriteLine($"Expected keywords 1231036291 but got keywords{(int)traceEvent.Keywords} for EventSource=TestEventSource0 Event=TestEvent2"); return false; }
                    if ((int)traceEvent.Opcode != 0) { Console.WriteLine(traceOpcodeValidationMessage, 0, (int)traceEvent.Opcode, "TestEventSource0", "TestEvent2"); return false; }
                     ++s_successCount;
                    if (traceEvent.PayloadNames.Count() != 4) { Console.WriteLine(tracePayloadValidationMessage, 4, traceEvent.PayloadNames.Count(), "TestEventSource0", "TestEvent2"); return false; }
                    if (traceEvent.PayloadNames[0] != "arg0") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg0", traceEvent.PayloadNames[0], "TestEventSource0", "TestEvent2"); return false; }
                    if (traceEvent.PayloadValue(0).GetType() != typeof(long)) { Console.WriteLine(tracePayloadTypeValidationMessage, "long", traceEvent.PayloadValue(0).GetType(), "TestEventSource0", "TestEvent2", "arg0"); return false; }
                    if ((long)traceEvent.PayloadValue(0) != -1001479330) {  Console.WriteLine(tracePayloadValueValidationMessage, -1001479330, traceEvent.PayloadValue(0), "TestEventSource0", "TestEvent2", "arg0"); return false; }
                    if (traceEvent.PayloadNames[1] != "arg1") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg1", traceEvent.PayloadNames[1], "TestEventSource0", "TestEvent2"); return false; }
                    if (traceEvent.PayloadValue(1).GetType() != typeof(int)) { Console.WriteLine(tracePayloadTypeValidationMessage, "int", traceEvent.PayloadValue(1).GetType(), "TestEventSource0", "TestEvent2", "arg1"); return false; }
                    if ((int)traceEvent.PayloadValue(1) != -1397908228) {  Console.WriteLine(tracePayloadValueValidationMessage, -1397908228, traceEvent.PayloadValue(1), "TestEventSource0", "TestEvent2", "arg1"); return false; }
                    if (traceEvent.PayloadNames[2] != "arg2") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg2", traceEvent.PayloadNames[2], "TestEventSource0", "TestEvent2"); return false; }
                    if (traceEvent.PayloadValue(2).GetType() != typeof(int[])) { Console.WriteLine(tracePayloadTypeValidationMessage, "int[]", traceEvent.PayloadValue(2).GetType(), "TestEventSource0", "TestEvent2", "arg2"); return false; }
                    if (!ArraysEqual((int[])traceEvent.PayloadValue(2), new int[] {1470938110, 172564262, 1133558854, -1572049829})) { Console.WriteLine(tracePayloadValueValidationMessage, new int[] {1470938110, 172564262, 1133558854, -1572049829}, traceEvent.PayloadValue(2), "TestEventSource0", "TestEvent2", "arg2"); return false; }
                    if (traceEvent.PayloadNames[3] != "arg3") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg3", traceEvent.PayloadNames[3], "TestEventSource0", "TestEvent2"); return false; }
                    if (traceEvent.PayloadValue(3).GetType() != typeof(ulong[])) { Console.WriteLine(tracePayloadTypeValidationMessage, "ulong[]", traceEvent.PayloadValue(3).GetType(), "TestEventSource0", "TestEvent2", "arg3"); return false; }
                    if (!ArraysEqual((ulong[])traceEvent.PayloadValue(3), new ulong[] {(ulong)2055126903, (ulong)593325874, (ulong)2130052527, (ulong)162795177})) { Console.WriteLine(tracePayloadValueValidationMessage, new ulong[] {(ulong)2055126903, (ulong)593325874, (ulong)2130052527, (ulong)162795177}, traceEvent.PayloadValue(3), "TestEventSource0", "TestEvent2", "arg3"); return false; }

                    return true;
                }
                if (traceEvent.EventName == "TestEvent3")
                {
                    // Skipping ID/Version validation because this EventSource is using SelfDescribing events.
                    if ((int)traceEvent.Level != 2) { Console.WriteLine(traceLevelValidationMessage, 2, (int)traceEvent.Level, "TestEventSource0", "TestEvent3"); return false; }
                    if ((int)traceEvent.Keywords != 0) { Console.WriteLine($"Expected keywords 0 but got keywords{(int)traceEvent.Keywords} for EventSource=TestEventSource0 Event=TestEvent3"); return false; }
                    if ((int)traceEvent.Opcode != 24) { Console.WriteLine(traceOpcodeValidationMessage, 24, (int)traceEvent.Opcode, "TestEventSource0", "TestEvent3"); return false; }
                     ++s_successCount;
                    if (traceEvent.PayloadNames.Count() != 1) { Console.WriteLine(tracePayloadValidationMessage, 1, traceEvent.PayloadNames.Count(), "TestEventSource0", "TestEvent3"); return false; }
                    if (traceEvent.PayloadNames[0] != "arg0") { Console.WriteLine(tracePayloadNamesValidationMessage, "arg0", traceEvent.PayloadNames[0], "TestEventSource0", "TestEvent3"); return false; }
                    if (traceEvent.PayloadValue(0).GetType() != typeof(char[])) { Console.WriteLine(tracePayloadTypeValidationMessage, "char[]", traceEvent.PayloadValue(0).GetType(), "TestEventSource0", "TestEvent3", "arg0"); return false; }
                    if (!ArraysEqual((char[])traceEvent.PayloadValue(0), new char[] {(char)59299, (char)13231, (char)38541, (char)7407, (char)35812})) { Console.WriteLine(tracePayloadValueValidationMessage, new char[] {(char)59299, (char)13231, (char)38541, (char)7407, (char)35812}, traceEvent.PayloadValue(0), "TestEventSource0", "TestEvent3", "arg0"); return false; }

                    return true;
                }
            }

            return false;
        }

        static void Main(string[] args)
        {
            Console.Read();
            
            List<EventPipeProvider> providers = new List<EventPipeProvider>
            {
                new EventPipeProvider("Microsoft - Windows - DotNETRuntime", EventLevel.Informational, (long)EventKeywords.All),
                new EventPipeProvider("TestEventSource0", EventLevel.Informational, (long)EventKeywords.All),
            };

            using (EventPipeSession session = AttachEventPipeSessionToSelf(providers))
            {
                WriteEvents();
                ManualResetEvent allEventsReceivedEvent = new ManualResetEvent(false);

                int eventCount = 0;
                var source = new EventPipeEventSource(session.EventStream);
                source.Dynamic.All += (TraceEvent traceEvent) =>
                {
                    ++eventCount;
                    ValidateEvent(traceEvent);
                };

                Thread processingThread = new Thread(new ThreadStart(() =>
                {
                    source.Process();
                }));

                Console.WriteLine("Starting processing thread");
                processingThread.Start();

                session.Stop();

                Console.WriteLine("Joining processing thread");
                processingThread.Join();
                Console.WriteLine($"Number of events successfully validated={s_successCount}");
                Console.WriteLine($"Total number of events={eventCount}"); 
            }
        }
    }
}
